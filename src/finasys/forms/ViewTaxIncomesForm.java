/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package finasys.forms;

import finasys.User;
import finasys.enities.Tincomes;
import finasys.forms.administration.AdministrationForm;
import finasys.managers.DatabaseManager;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.swing.event.TableModelEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author stjohn
 */
public final class ViewTaxIncomesForm extends javax.swing.JInternalFrame {

    private static ViewTaxIncomesForm instance;

    public static ViewTaxIncomesForm getInstance() {
        if (instance == null) {
            instance = new ViewTaxIncomesForm();
        }
        return instance;
    } 

    private List<Tincomes> taxes;
    private int min = 0, max, pageCounter = 1, pageCounterLimit;

    /**
     * Creates new form ViewTaxIncomesForm
     */
    public ViewTaxIncomesForm() {
        initComponents();
        this.setTitle("Taxes");
        updateTable();
    }

    public void updateTable() {
        if(rowsPerScreenTxt.getText().isEmpty()) {
            rowsPerScreenTxt.setText("20");
        }
        int rowsPerScreen = Integer.parseInt(rowsPerScreenTxt.getText());
        taxes = DatabaseManager.getInstance().getTaxRows();
        int maxSize = taxes.size();
        int a = maxSize / rowsPerScreen;
        pageCounterLimit = a == 0 ? a : a + 1;
        if (pageCounter < 1) {
            pageCounter = 1;
        }
        if (pageCounterLimit < pageCounter) {
            pageCounter = pageCounterLimit;
        }
        max = rowsPerScreen * pageCounter;
        min = rowsPerScreen * (pageCounter - 1);
        if (max > maxSize) {
            max = min + (maxSize % rowsPerScreen);
        }
        TaxTableModel tm = new TaxTableModel(taxes.subList(min, max));
        tm.setRowCount(tm.getSize());

//        tm.newDataAvailable(new TableModelEvent(tm));
        taxTable.setModel(tm);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        taxTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        rowsPerScreenTxt = new javax.swing.JTextField();
        nextPage = new javax.swing.JButton();
        prevPage = new javax.swing.JButton();
        lastPage = new javax.swing.JButton();
        firstPage = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);

        taxTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(taxTable);

        jLabel1.setText("Rows per screen:");

        rowsPerScreenTxt.setText("20");
        rowsPerScreenTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                rowsPerScreenTxtKeyPressed(evt);
            }
        });

        nextPage.setText(">");
        nextPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextPageActionPerformed(evt);
            }
        });

        prevPage.setText("<");
        prevPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevPageActionPerformed(evt);
            }
        });

        lastPage.setText(">>");
        lastPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lastPageActionPerformed(evt);
            }
        });

        firstPage.setText("<<");
        firstPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstPageActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 523, Short.MAX_VALUE)
                        .addGap(28, 28, 28))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rowsPerScreenTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(firstPage, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(prevPage)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nextPage, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lastPage, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(rowsPerScreenTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nextPage)
                    .addComponent(prevPage)
                    .addComponent(lastPage)
                    .addComponent(firstPage))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nextPageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextPageActionPerformed
        pageCounter++;
        updateTable();
    }//GEN-LAST:event_nextPageActionPerformed

    private void prevPageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevPageActionPerformed
        pageCounter--;
        updateTable();
    }//GEN-LAST:event_prevPageActionPerformed

    private void rowsPerScreenTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rowsPerScreenTxtKeyPressed
//        final char key = evt.getKeyChar();
        if (!Character.isDigit(evt.getKeyChar())) {
            evt.consume();
            return;
        }
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                int rowsPerScreen = Integer.parseInt(rowsPerScreenTxt.getText());
                if (rowsPerScreen > taxes.size()) {
                    rowsPerScreenTxt.setText(taxes.size() + "");
                }
            }
        });
    }//GEN-LAST:event_rowsPerScreenTxtKeyPressed

    private void firstPageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstPageActionPerformed
        pageCounter = 1;
        updateTable();
    }//GEN-LAST:event_firstPageActionPerformed

    private void lastPageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lastPageActionPerformed
        pageCounter = pageCounterLimit;
        updateTable();
    }//GEN-LAST:event_lastPageActionPerformed

    
    
    private static class TaxTableModel extends DefaultTableModel {

        private final String[] columnNames = {"Tax ID", "Amount", "Date"};
        private final Object[][] data;

        public TaxTableModel(List<Tincomes> taxes) {
            if (taxes == null || taxes.isEmpty()) { // NULL CHECK 
                data = new Object[][]{};
                return;
            }
            data = new Object[taxes.size()][3];
            for (int i = 0; i < taxes.size(); i++) {
                data[i][0] = taxes.get(i).getTaxid();
                data[i][1] = taxes.get(i).getAmount();
                data[i][2] = taxes.get(i).getTdate();
            }
        }

        @Override
        public String getColumnName(int col) {
            return columnNames[col];
        }

        @Override
        public int getColumnCount() {
            return columnNames.length;
        }

        @Override
        public Object getValueAt(int row, int col) {
            return data[row][col];
        }

        public int getSize() {
            return data.length;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton firstPage;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton lastPage;
    private javax.swing.JButton nextPage;
    private javax.swing.JButton prevPage;
    private javax.swing.JTextField rowsPerScreenTxt;
    private javax.swing.JTable taxTable;
    // End of variables declaration//GEN-END:variables
}
